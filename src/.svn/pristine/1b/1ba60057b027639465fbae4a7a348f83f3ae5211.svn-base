package hemlock;

import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Inputs {
	
	static Scanner in = new Scanner(System.in);
	
	public static int mainMenuInputs(String input) {
		switch(input) {
			case "n":
			case "new game": return 1; 
			case "l":
			case "load": return 2; 
			case "q":
			case "quit":return 3;
			case "debug": return 4; 
			case "cred":
			case "credits": return 5;
			case "c":
			case "cont":
			case "continue": return 6;
		}
		return 0;

	}
	
	public static void menuInputsDead(Scene scene) {
		String input = in.nextLine().toLowerCase();
		if(input.length()>=1) {
			switch (input) {
				case "h":
				case "commands":
				case "help": Dialogue.help(); break;
				case "m":
				case "menu":
				case "main menu": Game.mainMenu(scene,true); break;
				case "girls":
				case "girl":
				case "roster": Functions.printCohort(scene.getSceneGirls()); break; 
				case "dice": System.out.println("Rolling dice . . .\n)"); Functions.rollDice(); break;
			//bring up player stats
				case "stats":
				case "player":
				case "me":  Dialogue.playerOverview(scene.getScenePlayer());  break;
			//search for girl
				case "l":
				case "find":
				case "search":
				case "lookup": System.out.println("Who would you like to look up?"); input = in.nextLine();
							  Functions.girlLookup(input,scene); break;
			//bring up green
				case "green":
				case "victim":
				case "victims":
				case "dead": Functions.printGreen(scene); break;
			//bring up preds
				case "preds":
				case "predators":
				case "pred":
				case "predator": Functions.printPredators(scene.getSceneGirls()); break;
			//time/date/week
				case "time":
				case "date":
				case "week":
				case "day": break;
			//start scene
				case "b":
				case "start":
				case "begin":
				case "hunt": System.out.println("You cannot play anymore because you are dead! Sorry!"); break;
				}
			}
	}
	
	public static void menuInputs(Scene scene) {
		String input = in.nextLine().toLowerCase();
		if(input.length()>=1) {
			switch (input) {
				case "h":
				case "commands":
				case "help": Dialogue.help(); break;
				case "m":
				case "menu":
				case "main menu": Game.mainMenu(scene,true); break;
				case "girls":
				case "girl":
				case "roster": Functions.printCohort(scene.getSceneGirls()); break; 
				case "dice": System.out.println("Rolling dice . . .\n)"); Functions.rollDice(); break;
			//bring up player stats
				case "stats":
				case "player":
				case "me":  Dialogue.playerOverview(scene.getScenePlayer());  break;
			//search for girl
				case "l":
				case "find":
				case "search":
				case "lookup": System.out.println("\n\tWho would you like to look up?"); input = in.nextLine();
							  Functions.girlLookup(input,scene); break;
			//bring up green
				case "green":
				case "victim":
				case "victims":
				case "dead": Functions.printGreen(scene); break;
			//bring up preds
				case "preds":
				case "predators":
				case "pred":
				case "predator": Functions.printPredators(scene.getSceneGirls()); break;
			//time/date/week
				case "time":
				case "date":
				case "week":
				case "day": break;
			//start scene
				case "b":
				case "start":
				case "begin":
				case "hunt": if(scene.getScenePlayer().getPlayerAlive() == false) { System.out.println("You cannot play anymore because you are dead! Sorry!"); } 
							else if(scene.getScenePlayer().getPlayerAlive() == true) { Dialogue.divider(); Dialogue.daysPassed(scene.getScenePlayer());
							Scene.scene(scene);} break;
				}
			}
	    }
	
	public static void sceneInputs(Scene scene) {
		Random rand = new Random();
		String input = in.nextLine().toLowerCase();
		if(input.length()>=1) {
			switch (input) {
			//bring up girl list
			case "g":
			case "girls":
			case "girl":
			case "roster":
			case "menu": Functions.printCohort(scene.getSceneGirls()); break; 
			case "dice": System.out.println("Rolling dice . . .\n"); Functions.rollDice(); break;
		//bring up player stats
			case "m": System.out.println("\n\tYou cannot access the main menu while in a scene.\n"); break;
			case "stats":
			case "player":
			case "me":  Dialogue.playerOverview(scene.getScenePlayer()); break;
		//search for girl
			case "find":
			case "search":
			case "lookup": System.out.println("\n\tWho would you like to look up?"); input = in.nextLine();
						  Functions.girlLookup(input,scene); break;
		//bring up green
			case "green":
			case "victim":
			case "victims":
			case "dead":  Functions.printGreen(scene); break;
		//bring up preds
			case "preds":
			case "predators":
			case "pred":
			case "predator": Functions.printPredators(scene.getSceneGirls()); break;
		//time/date/week
			case "time":
			case "date":
			case "week":
			case "day": break;
		//actions
			case "ae":
			case "auto-eat": System.out.printf("\n\t  Who? "); input = in.nextLine().toLowerCase(); Functions.beginEatingGirl(input,scene); break;
			case "e":
			case "eat":
			case "swallow":
			case "devour": System.out.printf("\n\t  Who? "); input = in.nextLine().toLowerCase(); Functions.beginEatingGirl(input,scene); break;
			case "girls in scene": Functions.listSceneGirls(scene.getGirlsInScene()); break;
			case "w":
			case "wait": System.out.printf("\nYou wait for an opportunity. ");
						Functions.manipulateWindowTransition(scene, 1); break;
			case "roam":
			case "wander":
			case "walk":
			case "move": System.out.printf("\nYou roam around the halls for greener pastures. ");
						scene.setGirlsInScene(Functions.createGirlsInScene(scene, false));
						int timePassing = rand.nextInt(2) + 1;
						Functions.manipulateWindowTransition(scene, timePassing); break;
			case "s":
			case "end": 
			case "stop": Functions.endScene(scene); break;
			
			}
		}
		return;
	}

	public static int eatingInputs() {
		//System.out.printf("Keep eating (eat) or let her go (stop)? ");
		String input = in.nextLine().toLowerCase();
		if(input.length()>=1) {
			switch (input) {
			case "e":
			case "eat":
			case "swallow":
			case "devour": return 1; 
			case "s":
			case "stop":
			case "done": return 2;
			}
		}
		return 0;
	}
}
