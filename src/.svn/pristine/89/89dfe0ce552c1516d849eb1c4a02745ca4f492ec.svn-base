package hemlock;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;
import java.util.StringTokenizer;

public class Dialogue {
		

	
	//================================================================================
	// Main Menu
	//================================================================================
	
		//contains ascii text and version number
		public static void bannerText() { 
			System.out.println(
				offset(4) +"    __  __               __           __  \r\n" + 
				offset(4) +"   / / / /__  ____ ___  / /___  _____/ /__\r\n" + 
				offset(4) +"  / /_/ / _ \\/ __ `__ \\/ / __ \\/ ___/ //_/\r\n" + 
				offset(4) +" / __  /  __/ / / / / / / /_/ / /__/ ,<   \r\n" + 
				offset(4) +"/_/ /_/\\___/_/ /_/ /_/_/\\____/\\___/_/|_|  \r\n" + 
				offset(4) +"    / / / (_)___ _/ /_                     \r\n" + 
				offset(4) +"   / /_/ / / __ `/ __ \\   version 0.20     \r\n" + 
				offset(4) +"  / __  / / /_/ / / / /                    \r\n" + 
				offset(4) +" /_/ /_/_/\\__, /_/ /_/                     \r\n" + 
				offset(4) +"        /____/                    ");
			}
	
		//main menu text
		public static void mainMenuText(Scene scene) {
			divider();
			String o3 = offset(3);
			String o4 = offset(4);
				System.out.println(
						o3 + "Main menu: \n"
						+ o3 + "Choose an option (please use specific text commands):\n");
			if(scene.getSceneGirls() != null) {
					System.out.println(
						o4 + "- (c)ontinue\n\n" + 
						o4 + "- (n)ew game\n"+ 
						o4 + "- (l)oad\n" +
						o4 + "- (q)uit\n\n" + 
						o4 + "- credits\n"+ 
						o4 );
			} else {
				 System.out.println(
						o4 + "- (n)ew game\n"+ 
						o4 + "- (l)oad\n" +
						o4 + "- (q)uit\n\n" + 
						o4 + "- credits\n"+ 
						o4 );
			}
		}
		
		//credits
		public static void credits() {
			String o2 = offset(2);
			String o4 = offset(4);
			System.out.println(
					  "\nThese are all the people that worked on this little game. \n\n"
					+ "\tCredits:\n"
					+ o2 + "adelta261 - creator/writer/programmer\n"
					+ o2 + "toppers - writer" 
					+ o2 + "" 
					+ o2 + "" );
		}
		
	//================================================================================
	// Help page
	//================================================================================
		
		public static void help() {
			String o1 = offset(1);
			String o2 = offset(2);
			String o3 = offset(3);
			System.out.println(
					  "\nWelcome to the help page!\n\n"
					+ "\tList of commands:\n\n"
					+ "\tBetween-scene Menu Shortcuts (some of these, marked with * are NOT available during scenes):\n"
					+ o2 + "(m)enu - goes to main menu.*        \t(s)ave - save your game (limited)*\n" 
					+ o2 + "(f)ind - find a girl, specify name  \t(l)oad - load a game *            \n" 
						 + "\n"
					+ "\tUseful commands:\n"
					+ o2 + "girls - shows list of all girls     \tme - shows the player\n"
					+ o2 + "preds - shows list of all predators \ttime - shows the in-game time\n"
					+ o2 + "green - shows list of all dead girls\tdate - shows the in-game date/day\n");
		}
		
	
	//================================================================================
	// Context menu texts
	//================================================================================
	
		//text that displays when returned to between-scene menu
		public static void gameMenuText() {
			divider();
			System.out.println("Use the (h)elp command if you get stuck. \n"
					+ "\n\tType (b)egin to begin a new scene.");
		}
		
		//text that displays information at the end of the scene
		public static void afterActionReport(Scene scene) {
			System.out.println("\n\tThis scene, you ate " + scene.getGirlsEaten() + " girl(s)!");
			if(scene.getScenePlayer().getGainMode() == true) {
				System.out.println("\tYou gain "  + (scene.getScenePlayer().getPlayerWeight()-scene.getScenePlayer().getPlayerLastWeight()) 
				+ " kgs, or " + Functions.metricToImperialWeight(scene.getScenePlayer().getPlayerWeight()-scene.getScenePlayer().getPlayerLastWeight()) 
				+ " lbs.");
			}
		}
		
		//text that displays information at the start of the scene
		public static void daysPassed(Player player) {
			if(player.getDays()>0) {
				System.out.println("\n\tIt has been " + (player.getDays()-player.getLastDay())/5 + " week(s) and "  + (player.getDays()-player.getLastDay())%5 + " day(s) since your last romp.\n"
						+ "\tThe school year began "  + player.getDays()/5 + " week(s) and " + player.getDays()%5 + " ago.\n");
				if(player.getDays() < 25 && player.getDays() >= 0) {
					System.out.println("\tIt is the month of September.");
				} else if(player.getDays() < 50 && player.getDays() >= 25) {
					System.out.println("\tIt is the month of November.");
				} else if(player.getDays() < 70 && player.getDays() >= 50) {
					System.out.println("\tIt is the month of December.");
				} else if(player.getDays() < 95 && player.getDays() >= 70) {
					System.out.println("\tIt is the month of January.");
				} else if(player.getDays() < 115 && player.getDays() >= 95) {
					System.out.println("\tIt is the month of February.");
				} else if(player.getDays() < 140 && player.getDays() >= 115) {
					System.out.println("\tIt is the month of March.");
				} else if(player.getDays() < 162 && player.getDays() >= 140) {
					System.out.println("\tIt is the month of April.");
				} else if(player.getDays() < 184 && player.getDays() >= 162) {
					System.out.println("\tIt is the month of May.");
				} else if(player.getDays() < 200 && player.getDays() >= 184) {
					System.out.println("\tIt is the month of June. The last month of school.");
				}
				System.out.println("");
				player.setLastDay(player.getDays());
				
				if(player.getGainMode() == true) {
					System.out.println("\n\tYou have gained "  + (player.getPlayerWeight()-player.getPlayerLastWeight()) + " kgs, or " + Functions.metricToImperialWeight(player.getPlayerWeight()-player.getPlayerLastWeight()) 
					+ " lbs. since your last scene "
					+ "\n\tand " +  (player.getPlayerWeight()-player.getPlayerStartingWeight()) + " kgs, or " + Functions.metricToImperialWeight(player.getPlayerWeight()-player.getPlayerStartingWeight()) 
					+ " lbs. since the start of the school year.");
				}
			}
		}
		
		//prints a value that corresponds with a certain event between scenes
		public static void daysInBetween(int num) {
			switch(num) {
			case 0: System.out.print("\n\tA girl was eaten in the passing days! Check the green with 'green'.\n");
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18:
			case 19:
			case 20:
			case 21:
			case 22:
			case 23:
			case 24: break;
				
				
			}
		}
	
	//================================================================================
	// Game over
	//================================================================================
		
		public static void gameOver() {
			System.out.printf("\nYou are dead. Not big surprise.");
		}
		
	//================================================================================
	// Scene dialogues
	//================================================================================
	
		public static void mealInterrupted(String girlName,String teacherName) {
			System.out.println("'Stop! Spit her out!' says " + teacherName 
					+ ". You let " + girlName + " go! She runs for the hills. "
					+  teacherName + " sends you to class. Your rampage is over for today. You have been sent to class.");
		}
		
		public static void mealInterruptedTeacher(String girlName,String teacherName) {
			System.out.println("'Eating a member is staff is punishible by a permanent detention!' says " + teacherName 
					+ ".\n\n\t" + girlName + " is pulled from you. She fixes her hair."
					+ "\n\t" + teacherName + " eats you."
					+ "\nYou are dead. Not big surprise.");
		}
		
		public static void teacherEatingLuck() {
			System.out.println("\tDespite what you've heard, once you release the teacher in your jaws, while they seem upset, they take pity on you.\n"
					+ "\tJust a lapse of judgement, perhaps. We were all young once. Odds are that that was a slim escape.\n");
		}
		
		public static void girlEatingLuck(String girlName, String teacherName, String playerName, int num) {
			System.out.println("You let " + girlName + " go. 'Thank you, " + playerName + ". Now hurry along to class,' says " + teacherName 
					+ " You count your blessings that you weren't led to class on your own, and now wait to act. What do you do now?");
		}
		
	//================================================================================
	// Preset lists
	//================================================================================
		
		public static void presetList() {
			System.out.printf(
					  "\nChoose from this list of presets:"
					+ "\n"
					+ "\n\t- Debra: Chilled, Slacker half-naga. (furs disabled, weight gain disabled)."
					+ "\n\t- Michelle: Preppy, Slacker full-naga. (furs disabled, weight gain disabled)."
					+ "\n"
					+ "\n\t- Nee: Bully, Cheerleading neko. (furs disabled, weight gain enabled)"
					+ "\n"
					+ "\n\t-"
					+ "\n"
					+ "\n\t- Graisse: Bully, Slacker anthro feline. (furs enabled, weight gain enabled)"
					+ "\n\t- Lucy: Preppy, Drama anthro canine. (furs enabled, weight gain enabled)");
		}
		
	
		//================================================================================
	    // Printing individual characters
	    //================================================================================
		
		//overview the player gets after character creation, shows differently depending on gain mode
		//TODO: ADD FUR MODE UPGRADE
		public static void creationOverview(Player player) {
			if (player.getGainMode() == true) {
				System.out.println("Character overview:"
						+ "\n\nName: " + player.getPlayerName() + " " + player.getPlayerLastName()
						+ "\nHouse: " + player.getPlayerHouse()
						+ "\nGroup: " + player.getPlayerClub()
						+ "\n\n\tRace: " + player.getPlayerRace()
						+ "\n\tSkin Colour: " + player.getPlayerSkinColour()
						+ "\n\tHair Colour: " + player.getPlayerHairColour()
						+ "\n\tHair Type: " + player.getPlayerHairType()
						+ "\n\tHeight: " + player.getPlayerHeight() + " cm, or " + Functions.metricToImperialHeight(player.getPlayerHeight())
						+ "\n\tWeight: " + player.getPlayerWeight() + " kg, or " + Functions.metricToImperialWeight(player.getPlayerWeight()) + " lbs."
						+ "\n\nStats -"
						+ "\n\t\tClass: " + player.getPlayerClass()
						+ "\n\t\tCharisma: " + Functions.convertStars(player.getCharisma())
						+ "\n\t\tIntellgence: " + Functions.convertStars(player.getIntelligence())
						+ "\n\t\tPerception: " + Functions.convertStars(player.getPerception())
						+ "\n\t\tStrength: " +Functions.convertStars( player.getStrength())
						+ "\n\t\tLuck: " + Functions.convertStars(player.getLuck())
						+ "\n");
			} else {
				System.out.println("Character overview:"
						+ "\n\nName: " + player.getPlayerName() + " " + player.getPlayerLastName()
						+ "\nHouse: " + player.getPlayerHouse()
						+ "\nGroup: " + player.getPlayerClub()
						+ "\n\n\tRace: " + player.getPlayerRace()
						+ "\n\tSkin Colour: " + player.getPlayerSkinColour()
						+ "\n\tHair Colour: " + player.getPlayerHairColour()
						+ "\n\tHair Type: " + player.getPlayerHairType()
						+ "\n\nStats -"
						+ "\n\t\tClass: " + player.getPlayerClass()
						+ "\n\t\tCharisma: " + Functions.convertStars(player.getCharisma())
						+ "\n\t\tIntellgence: " + Functions.convertStars(player.getIntelligence())
						+ "\n\t\tPerception: " + Functions.convertStars(player.getPerception())
						+ "\n\t\tStrength: " +Functions.convertStars( player.getStrength())
						+ "\n\t\tLuck: " + Functions.convertStars(player.getLuck())
						+ "\n");
			}
			
		}
		
		//overview the player gets on calling, shows differently depending on gain mode, also shows some stats
		//TODO: ADD FUR MODE UPGRADE
		public static void playerOverview(Player player) {
			if (player.getGainMode() == true) {
				System.out.println("\nCharacter overview:"
						+ "\n\nName: " + player.getPlayerName() + " " + player.getPlayerLastName()
						+ "\nHouse: " + player.getPlayerHouse()
						+ "\nGroup: " + player.getPlayerClub()
						+ "\n\n\tYou are a " + player.getPlayerRace()
						+ " with " + player.getPlayerSkinColour()
						+ " skin, " + player.getPlayerHairColour()
						+ " hair, styled " + player.getPlayerHairType()
						+ " and your body is " + player.getPlayerBodyType() + "."
						+ "\n\n\tYou are " + player.getPlayerHeight() + " cm, or " + Functions.metricToImperialHeight(player.getPlayerHeight()) + " tall, and you weigh "
								+ player.getPlayerWeight() + " kg, or " + Functions.metricToImperialWeight(player.getPlayerWeight()) + " lbs.");
				
				System.out.println
						("\tYou have gained " + (player.getPlayerWeight()-player.getPlayerStartingWeight()) + " kgs, or " + Functions.metricToImperialWeight(player.getPlayerWeight()-player.getPlayerStartingWeight()) 
						+ " lbs. since the start of the school year."
						+ "\n\n\tStats -"
						+ "\n\t\tClass: " + player.getPlayerClass()
						+ "\n\t\tCharisma: " + Functions.convertStars(player.getCharisma())
						+ "\n\t\tIntellgence: " + Functions.convertStars(player.getIntelligence())
						+ "\n\t\tPerception: " + Functions.convertStars(player.getPerception())
						+ "\n\t\tStrength: " +Functions.convertStars( player.getStrength())
						+ "\n\t\tLuck: " + Functions.convertStars(player.getLuck()));
				if(player.getVictims() == null) {
					System.out.println("\n\tFellow students eaten: 0");
				} else {
					System.out.println("\n\tFellow students eaten: " + player.getVictims().toArray().length);
				}
			} else {
				System.out.println("\nCharacter overview:"
						+ "\n\nName: " + player.getPlayerName() + " " + player.getPlayerLastName()
						+ "\nHouse: " + player.getPlayerHouse()
						+ "\nGroup: " + player.getPlayerClub()
						+ "\n\n\tYou are a " + player.getPlayerRace()
						+ " with " + player.getPlayerSkinColour()
						+ " skin, " + player.getPlayerHairColour()
						+ " hair, styled " + player.getPlayerHairType()
						+ " and your body is " + player.getPlayerBodyType() + "."
						+ "\n\n\tStats -"
						+ "\n\t\tClass: " + player.getPlayerClass()
						+ "\n\t\tCharisma: " + Functions.convertStars(player.getCharisma())
						+ "\n\t\tIntellgence: " + Functions.convertStars(player.getIntelligence())
						+ "\n\t\tPerception: " + Functions.convertStars(player.getPerception())
						+ "\n\t\tStrength: " +Functions.convertStars( player.getStrength())
						+ "\n\t\tLuck: " + Functions.convertStars(player.getLuck()));
				if(player.getVictims() == null) {
					System.out.println("\n\tFellow students eaten: 0");
				} else {
					System.out.println("\n\tFellow students eaten: " + player.getVictims().toArray().length);
				}
			}
			
		}
		
		//overview of a girl, varies with alive or dead
		//TODO: ADD FUR MODE UPGRADE
		public static void girlOverview(int girlNumber, Scene scene) {
			Girl[] arr = scene.getSceneGirls();
			String o1 = offset(1);
			String o2 = offset(2);
			String o3 = offset(3);
											
				//teacher conditional
				if(scene.getSceneGirls()[girlNumber].getTeacher() == true) {
					System.out.printf(
							nl(2) + o1 + "Miss " + arr[girlNumber].getGirlName() + " " + arr[girlNumber].getGirlLastName() + Functions.convertStars(arr[girlNumber].getGirlStars()) + nl(2) +
							o1 + "A " + arr[girlNumber].getGirlMajorPersonality() + " woman who is " + arr[girlNumber].getGirlMinorPersonality()+ "." + nl(1) +
							o1 + "Role in staff: " + arr[girlNumber].getGirlSubject() + nl(1));
				} else {
					System.out.printf(
						 	 nl(2) + o1 + arr[girlNumber].getGirlName() + " " + arr[girlNumber].getGirlLastName() + Functions.convertStars(arr[girlNumber].getGirlStars()) + nl(2) +
							 o1 + "A " + arr[girlNumber].getGirlMajorPersonality() + " girl who is " + arr[girlNumber].getGirlMinorPersonality()+ "." + nl(1) +
							 o1 +  "House: " + arr[girlNumber].getGirlHouse() + nl(1) +
							 o1 + "Group: " + arr[girlNumber].getGirlClub() + nl(1));
				}
				
				//fur mode conditional
				if(scene.getScenePlayer().getFurMode() == true) {	
					System.out.printf(	
			 		   	nl(1) + o1 + arr[girlNumber].getGirlName() + " is an anthro " + arr[girlNumber].getGirlRace() + ". She has " + arr[girlNumber].getSkinColour() + " coloured fur and " + arr[girlNumber].getGirlHairColour()
						   + " hair, styled " + (arr[girlNumber].getGirlHairType()  + ". Her body is " + (arr[girlNumber].getGirlBodyType() + ".")));
				} else {
					System.out.printf(	
						nl(1) + o1 + arr[girlNumber].getGirlName() + " is a " + arr[girlNumber].getGirlRace() + ". She has " + arr[girlNumber].getGirlHairColour() + " hair, styled " + (arr[girlNumber].getGirlHairType() +
						". Her body is " + (arr[girlNumber].getGirlBodyType() + "." + nl(1))));	
				}
					
				//predator conditional
				if(arr[girlNumber].getGirlPredator() == true) {
					System.out.printf(
							nl(1) + o1 + arr[girlNumber].getGirlName() + " is a predator." + nl(1));
					//no victims conditional
					if(arr[girlNumber].getVictims() == null) {
						System.out.printf(o1 + "Fellow students eaten: 0" + nl(1));
					} else {
						System.out.printf(o1 + "Fellow students eaten: " + arr[girlNumber].getVictims().toArray().length + nl(1));
					}
				}
				
				//alive conditional
				if(arr[girlNumber].getGirlAlive() == false) {
				System.out.printf(nl(2) + o1 + arr[girlNumber].getGirlName() + " was eaten by " + arr[girlNumber].getGirlEatenBy() + nl(1));
				}
			
		}
		
	//================================================================================
	// Misc reusables
	//================================================================================
		
		public static String tabPadding(String string, int tabs) {
			tabs = tabs*8;
			int length = string.length();
			int diff = tabs - length;
			if(diff>0) {
				for(int i = 0; i < diff; i++) {
					string = string + " ";
				}
			} else {
				System.out.printf(" not enough tabs");
			}
			return string;
		}
		
		public static String offset(int num) {
			switch (num) {
			case 2: return "\t\t";
			case 3: return "\t\t\t";
			case 4: return "\t\t\t\t";
			case 5: return "\t\t\t\t\t";
			}
			return "\t";
		}
		
		public static void divider() {
			System.out.println(
					"\n\n" +
					"  .--.      .--.      .--.      .--.      .-'.      .--.      .--.      .--.      .--.      .`-.      .-\r\n" + 
					":::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::.\\::::::::\r\n" + 
					"'      `--'      `--'      `--'      `--'      `.-'      `--'      `--'      `--'      `-.'      `--'     \n");
		}
		
		public static String nl(int num) {
			switch (num) {
			case 2: return "\n\n";
			case 3: return "\n\n\n";
			case 4: return "\n\n\n\n";
			case 5: return "\n\n\n\n\n";
			}
			return "\n";
		}
		
		public static void invalidInput() {
			System.out.println("Invalid input.");
		}
		
	//================================================================================
	// Printing dialogue
	//================================================================================
		
		public static void printDialogue(ArrayList<String> dialogue) {
			Random rand = new Random();
			int j = rand.nextInt(dialogue.toArray().length);
			System.out.printf(dialogue.get(j));
		}
		
	//================================================================================
	// location dialogue
	//================================================================================
		
		static URL urlLocationDialogueFile = Girl.class.getResource("resources/locationDialogue.txt");
		
		public static ArrayList<ArrayList<String>> setLocationDialogue(String location){
			ArrayList<ArrayList<String>> locationDialogue = new ArrayList<ArrayList<String>>();
			
			return locationDialogue;
		}
		
		public static ArrayList<String> loadLocationDialogue(String type, Scene scene) {
			Girl girl = new Girl();
			ArrayList<String> data = new ArrayList<String>();
	        try(BufferedReader br = new BufferedReader(
	        new InputStreamReader(urlLocationDialogueFile.openStream()))){
	        	 String sCurrentLine;
	             while ((sCurrentLine = br.readLine()) != null) {
	             	switch(type) {
	             	case "library": if(sCurrentLine.equals("---START_BEGIN_GIRL_EATING_HF_DIALOGUE---")) {
	 									while ((sCurrentLine = br.readLine()) != null) {
	 										if(sCurrentLine.equals("---END_BEGIN_GIRL_EATING_HF_DIALOGUE---")) {
	 											break;
	 										} else {
	 											sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
	 											data.add(sCurrentLine);
	 										}
	 									}
	 	            				} break;
	             	case "beginFF": if(sCurrentLine.equals("---START_BEGIN_GIRL_EATING_FF_DIALOGUE---")) {
										while ((sCurrentLine = br.readLine()) != null) {
											if(sCurrentLine.equals("---END_BEGIN_GIRL_EATING_FF_DIALOGUE---")) {
												break;
											} else {
												sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
												data.add(sCurrentLine);
											}
										}
			     				} break;
	             	case "endHF": if(sCurrentLine.equals("---START_FINISH_GIRL_EATING_HF_DIALOGUE---")) {
							while ((sCurrentLine = br.readLine()) != null) {
								if(sCurrentLine.equals("---END_FINISH_GIRL_EATING_HF_DIALOGUE---")) {
									break;
								} else {
									sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
									data.add(sCurrentLine);
								}
							}
     				} break;
				 	case "next": break;
	             	}
	             }
	             
	        } catch (IOException e) {
				e.printStackTrace();
			}
	        return data;
		}
		
		
	//================================================================================
	// vore dialogue
	//================================================================================
	
		private ArrayList<ArrayList<String>> eatingGirlDialogue;

		
		public void setEatingGirlDialogue(/**ArrayList<String> eatingGirlDialogue**/ Girl girl, Scene scene){
			this.eatingGirlDialogue = new ArrayList<ArrayList<String>>();
			
			for(int i = 0;i<14;i++) {
				this.eatingGirlDialogue.add(setGirlVoreDialogue(scene,girl,i));
			}
		}
		
		public ArrayList<ArrayList<String>> getEatingGirlDialogue(){
			return this.eatingGirlDialogue;
		}
		
		
		public static ArrayList<String> setGirlVoreDialogue(Scene scene, Girl girl, int i) {
			ArrayList<String> temp = new ArrayList<String>();
			String[] arr = new String[] {"beginHF","beginFF","endHF","endFF","headReached","neckReached","shouldersReached","chestReached","waistReached","hipsReached",
										 "thighsReached","kneesReached","anklesReached","feetReached"
										};
			temp = loadVoreDialogue(arr[i],scene,girl);
			return temp;
		}
		
		public static String chooseRandomString(ArrayList<String> arrList) {
			Random rand = new Random();
			String string = arrList.get(rand.nextInt(arrList.toArray().length));
			return string + " ";
		}
		
		static URL urlVoreDialogueFile = Girl.class.getResource("resources/voreDialogue.txt");
		
		public static ArrayList<String> loadVoreDialogue(String type, Scene scene, Girl girl) {
			ArrayList<String> data = new ArrayList<String>();
	        try(BufferedReader br = new BufferedReader(
	        new InputStreamReader(urlVoreDialogueFile.openStream()))){
	        	 String sCurrentLine;
	             while ((sCurrentLine = br.readLine()) != null) {
	             	switch(type) {
	             	case "beginHF": if(sCurrentLine.equals("---START_BEGIN_GIRL_EATING_HF_DIALOGUE---")) {
	 									while ((sCurrentLine = br.readLine()) != null) {
	 										if(sCurrentLine.equals("---END_BEGIN_GIRL_EATING_HF_DIALOGUE---")) {
	 											break;
	 										} else {
	 											sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
	 											data.add(sCurrentLine);
	 										}
	 									}
	 	            				} break;
	             	case "beginFF": if(sCurrentLine.equals("---START_BEGIN_GIRL_EATING_FF_DIALOGUE---")) {
										while ((sCurrentLine = br.readLine()) != null) {
											if(sCurrentLine.equals("---END_BEGIN_GIRL_EATING_FF_DIALOGUE---")) {
												break;
											} else {
												sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
												data.add(sCurrentLine);
											}
										}
			     				} break;
	             	case "endHF": if(sCurrentLine.equals("---START_FINISH_GIRL_EATING_HF_DIALOGUE---")) {
							while ((sCurrentLine = br.readLine()) != null) {
								if(sCurrentLine.equals("---END_FINISH_GIRL_EATING_HF_DIALOGUE---")) {
									break;
								} else {
									sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
									data.add(sCurrentLine);
								}
							}
     				} break;
				 	case "endFF": if(sCurrentLine.equals("---START_FINISH_GIRL_EATING_FF_DIALOGUE---")) {
										while ((sCurrentLine = br.readLine()) != null) {
											if(sCurrentLine.equals("---END_FINISH_GIRL_EATING_FF_DIALOGUE---")) {
												break;
											} else {
												sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
												data.add(sCurrentLine);
											}
										}
				 				} break;
	             	case "headReached": if(sCurrentLine.equals("---START_GIRL_EATING_HEAD_REACHED---")) {
											while ((sCurrentLine = br.readLine()) != null) {
												if(sCurrentLine.equals("---END_GIRL_EATING_HEAD_REACHED---")) {
													break;
												} else {
													sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
													data.add(sCurrentLine);
												}
											}
					 				} break;
	             	case "neckReached": if(sCurrentLine.equals("---START_GIRL_EATING_NECK_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_NECK_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "shouldersReached": if(sCurrentLine.equals("---START_GIRL_EATING_SHOULDERS_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_SHOULDERS_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "chestReached": if(sCurrentLine.equals("---START_GIRL_EATING_CHEST_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_CHEST_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "waistReached": if(sCurrentLine.equals("---START_GIRL_EATING_WAIST_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_WAIST_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "hipsReached": if(sCurrentLine.equals("---START_GIRL_EATING_HIPS_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_HIPS_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "thighsReached": if(sCurrentLine.equals("---START_GIRL_EATING_THIGHS_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_THIGHS_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "kneesReached": if(sCurrentLine.equals("---START_GIRL_EATING_KNEES_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_KNEES_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "anklesReached": if(sCurrentLine.equals("---START_GIRL_EATING_ANKLES_REACHED---")) {
						while ((sCurrentLine = br.readLine()) != null) {
							if(sCurrentLine.equals("---END_GIRL_EATING_ANKLES_REACHED---")) {
								break;
							} else {
								sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
								data.add(sCurrentLine);
							}
						}
 				} break;
	             	case "feetReached": if(sCurrentLine.equals("---START_GIRL_EATING_FEET_REACHED---")) {
											while ((sCurrentLine = br.readLine()) != null) {
												if(sCurrentLine.equals("---END_GIRL_EATING_FEET_REACHED---")) {
													break;
												} else {
													sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
													data.add(sCurrentLine);
												}
											}
					 				} break;
	             	case "next": break;
	             	}
	             }
	             
	        } catch (IOException e) {
				e.printStackTrace();
			}
	        return data;
		}
		
	//================================================================================
	// loading files
	//================================================================================
		
		static URL urlDialogueFile = Girl.class.getResource("resources/dialogue.txt");
		

		
		public void setIntroDialogue(Girl girl, Scene scene, int i){
			this.introDialogue = loadDialogue("girlIntro", scene, girl);
		}
		
		public ArrayList<String> getIntroDialogue(){
			return this.introDialogue;
		}
		
		public static String keyWords(String input, Scene scene, Girl girl) {
			String output = input;
			switch (input) {
			//girl
			case "girlName": output = girl.getGirlDisplayName(); break;
			case "girlHairColour": output = girl.getGirlHairColour(); break;
			case "girlHairType": output = girl.getGirlHairType(); break;
			case "girlBodyType": output = girl.getGirlBodyType(); break;
			case "girlRace": output = girl.getGirlRace(); break;
			case "girlSkinColour": output = girl.getSkinColour(); break;
			case "girlClub": output = girl.getGirlClub(); break;
			case "girlHouse": output = girl.getGirlHouse(); break;
			case "girlHouseColour": output = girl.getGirlHouseColour(); break;
			//player
			case "playerName": output = scene.getScenePlayer().getPlayerName(); break;
			case "playerLastName": output = scene.getScenePlayer().getPlayerLastName(); break;
			case "playerRace": output = scene.getScenePlayer().getPlayerRace(); break;
			case "playerSkinColour": output = scene.getScenePlayer().getPlayerSkinColour(); break;
			case "playerHairColour": output = scene.getScenePlayer().getPlayerHairColour(); break;
			case "playerHairType": output = scene.getScenePlayer().getPlayerHairType(); break;
			case "playerBodyType": output = scene.getScenePlayer().getPlayerBodyType(); break;
			case "playerClub": output = scene.getScenePlayer().getPlayerClub(); break;
			case "playerClass": output = scene.getScenePlayer().getPlayerClass(); break;
			case "playerHouse": output = scene.getScenePlayer().getPlayerHouse(); break;
			//location
			case "locationName": output = scene.getLocation().getLocationName(); break;
			}
			return output;
		}
		
		public static String personaliseGirl(String string, Scene scene, Girl girl) {
			String str = string;
			ArrayList<String> before = new ArrayList<String>();
			
	        StringTokenizer st = new StringTokenizer(str, "[]-_()/\\\"':;|., !", true);
	        while (st.hasMoreElements()) {
	            before.add((String) st.nextElement());
	        }   
	        String finished = "";	        
	        for(int i = 0; i<before.toArray().length;i++) {
	        	finished = finished + keyWords(before.get(i),scene,girl);
	        }                
	    	return finished;
		}
		
		private ArrayList<String> introDialogue;

		
		public static ArrayList<String> loadDialogue(String type, Scene scene, Girl girl) {
			ArrayList<String> data = new ArrayList<String>();
	        try(BufferedReader br = new BufferedReader(
	        new InputStreamReader(urlDialogueFile.openStream()))){
	        	 String sCurrentLine;
	             while ((sCurrentLine = br.readLine()) != null) {
	             	switch(type) {
	             	case "girlIntro": if(sCurrentLine.equals("---START_GIRL_INTRO_DIALOGUE---")) {
	 									while ((sCurrentLine = br.readLine()) != null) {
	 										if(sCurrentLine.equals("---END_GIRL_INTRO_DIALOGUE---")) {
	 											break;
	 										} else {
	 											sCurrentLine = personaliseGirl(sCurrentLine,scene,girl);
	 											data.add(sCurrentLine);
	 										}
	 									}
	 	            				} break;
	             	case "next": break;
	             	}
	             }
	             
	        } catch (IOException e) {
				e.printStackTrace();
			}
	        return data;
		}
}
