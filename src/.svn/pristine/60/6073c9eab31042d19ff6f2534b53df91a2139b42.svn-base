package hemlock;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.function.Predicate;

public class World implements Serializable
{
	private int turnClock;
	private int days;
	private int lastDay;
	private Girl player;
	private Window window = new Window();
	private boolean caught;
	private ArrayList<Girl> girls = new ArrayList<>();
	private ArrayList<Girl> green = new ArrayList<>();
	private ArrayList<Girl> girlsInScene = new ArrayList<>();
	private int girlsEaten;
	private Location location = new Location();
	private ArrayList<Location> locationList;
	private boolean furMode = false;
	private boolean gainMode = true;

	public World()
	{
		window.windowDefault();
	}

	// ================================================================================
	// Scene Loop
	// ================================================================================

	public void finishDay()
	{
		reset();
		Functions.manipulateWindowTransition(1);
		Functions.populateScene();
		while (true)
		{
			if (getCaught() == false)
			{
				Inputs.sceneInputs();
			}
			else
			{
				if (getScenePlayer().getGirlAlive() == false)
				{
					return;
				}
				Functions.daysInbetween();
				Functions.daysPassed();
				if (getGainMode() == true)
				{
					Functions.gainWeight();
				}
				Dialogue.afterActionReport();
				Dialogue.gameMenuText();
				break;
			}

		}
	}

	// ================================================================================
	// Construct scene / reset scene
	// ================================================================================
	
	public void addStudents(int count)
	{
		for (int i = 0; i < count; ++i)
		{
			Girl newStudent = new Girl();
			newStudent.randomizeStudent();
			this.girls.add(newStudent);
		}
	}
	
	public void addTeachers(int count)
	{
		for (int i = 0; i < count; ++i)
		{
			Girl newTeacher = new Girl();
			newTeacher.randomizeTeacher(i);
			this.girls.add(newTeacher);
		}
	}
	
	public void populateWorld(int numGirls, int numTeachers)
	{
		// INITIALISING GIRLS AND TEACHERS
		this.girls.ensureCapacity(this.girls.size() + numGirls + numTeachers);

		addStudents(numGirls);
		addTeachers(numTeachers);
	}
	
	public void fillLocations() {
		//TODO add more locations
		String locations[] = {"hallways","locker room","library"};
		ArrayList<Location> locationList = new ArrayList<Location>();
		
		for(int i = 0;i<locations.length; i++) {
			locationList.add(Location.createLocation(locations[i]));
		}
		
		this.locationList = locationList;
	}

	public void reset()
	{
		setCaught(false);
		getSceneWindow().windowDefault();
		setGirlsEaten(0);
	}

	// ================================================================================
	// Scene setters
	// ================================================================================

	// lists
	
	public void setLocationList(ArrayList<Location> locationList) {
		this.locationList = locationList;
	}
	
	public void setFurMode(boolean furMode)
	{
		this.furMode = furMode;
	}

	public void setGainMode(boolean gainMode)
	{
		this.gainMode = gainMode;
	}

	public void setScenePlayer(Girl player)
	{
		this.player = player;
	}

	// game state
	public void setGirlsEaten(int girlsEaten)
	{
		this.girlsEaten = girlsEaten;
	}

	public void setCaught(boolean caught)
	{
		this.caught = caught;
	}

	// window
	public void setSceneTurnClock(int turns)
	{
		this.turnClock = turns;
	}

	public void setSceneWindow(Window window)
	{
		this.window = window;
	}

	// location
	public void setLocation(Location location)
	{
		this.location = location;
	}
	
	public void setDays(int days)
	{
		this.days = days;
	}
	
	public void setLastDay(int lastDay)
	{
		this.lastDay = lastDay;
	}

	// ================================================================================
	// Scene getters
	// ================================================================================

	// lists

	public ArrayList<Location> getLocationList(){
		return this.locationList;
	}
	
	public boolean getFurMode()
	{
		return this.furMode;
	}

	public boolean getGainMode()
	{
		return this.gainMode;
	}

	public Girl getScenePlayer()
	{
		return this.player;
	}

	public ArrayList<Girl> getAllGirls()
	{
		return this.girls;
	}

	public ArrayList<Girl> getGirlsInScene()
	{
		return this.girlsInScene;
	}

	public ArrayList<Girl> getGreen()
	{
		return this.green;
	}

	// game state
	public int getGirlsEaten()
	{
		return this.girlsEaten;
	}

	public boolean getCaught()
	{
		return this.caught;
	}

	// window
	public Window getSceneWindow()
	{
		return this.window;
	}

	public int getSceneTurnClock()
	{
		return this.turnClock;
	}

	// location
	public Location getLocation()
	{
		return this.location;
	}
	
	public int getDays()
	{
		return this.days;
	}
	
	public int getLastDay()
	{
		return this.lastDay;
	}
	
	public Girl findLivingGirl()
	{
		return findRandomGirl(g -> g.getGirlAlive());
	}
	
	public Girl findLivingPred()
	{
		return findRandomGirl(g -> g.getGirlAlive() && g.getGirlPredator());
	}
	
	public Girl findLivingTeacher()
	{
		return findRandomGirl(g -> g.getGirlAlive() && g.getTeacher());
	}
	
	public Girl findRandomGirl(Predicate<Girl> filter)
	{
		final int largePrime = 1237487;
		Random rand = new Random();
		final int count = this.girls.size();
		final int start = rand.nextInt(count);
		
		for (int i = (start + largePrime) % count; i != start; i = (i + largePrime) % count)
		{
			Girl girl = this.girls.get(i);
			if (filter == null || filter.test(girl))
			{
				return girl;
			}
		}
		
		return null;
	}
	
	public void addLivingStudents(ArrayList<Girl> addTo, int numToAdd)
	{
		addRandomGirls(addTo, numToAdd, g -> g.getGirlAlive() && !g.getTeacher());
	}
	
	public void addLivingTeachers(ArrayList<Girl> addTo, int numToAdd)
	{
		addRandomGirls(addTo, numToAdd, g -> g.getGirlAlive() && g.getTeacher());
	}
	
	public void addRandomGirls(ArrayList<Girl> addTo, int numToAdd, Predicate<Girl> filter)
	{
		final int largePrime = 1237487;
		Random rand = new Random();
		final int count = getAllGirls().size();
		final int start = rand.nextInt(count);
		
		for (int i = (start + largePrime) % count; i != start && numToAdd > 0; i = (i + largePrime) % count)
		{
			Girl girl = getAllGirls().get(i);
			if (filter == null || filter.test(girl))
			{
				addTo.add(girl);
				--numToAdd;
			}
		}
	}
	
	public void addAllLivingStudents(ArrayList<Girl> addTo)
	{
		addAllGirls(addTo, g -> g.getGirlAlive());
	}
	
	public void addAllLivingPredators(ArrayList<Girl> addTo)
	{
		addAllGirls(addTo, g -> g.getGirlAlive() && g.getGirlPredator());
	}
	
	public void addAllLivingTeachers(ArrayList<Girl> addTo)
	{
		addAllGirls(addTo, g -> g.getGirlAlive() && g.getTeacher());
	}
	
	public void addAllGirls(ArrayList<Girl> addTo, Predicate<Girl> filter)
	{
		for (int i = 0; i < getAllGirls().size(); ++i)
		{
			Girl girl = getAllGirls().get(i);
			if (filter == null || filter.test(girl))
			{
				addTo.add(girl);
			}
		}
	}
}
