package hemlock;

/** Copyright (c) 1995, 2008, Oracle and/or its affiliates. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   - Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*
*   - Redistributions in binary form must reproduce the above copyright
*     notice, this list of conditions and the following disclaimer in the
*     documentation and/or other materials provided with the distribution.
*
*   - Neither the name of Oracle or the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
* PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**/

import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.*;
import javax.swing.text.Document;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class TextDemo extends JPanel implements ActionListener {
	private static TextDemo instance;

	private AutocompletingTextField textIn;
	private JTextPane textOut;

	private final PipedInputStream inPipe = new PipedInputStream();
	private final PipedInputStream outPipe = new PipedInputStream();
	private PrintWriter inWriter;

	public TextDemo() {
		super(new GridBagLayout());

		System.setIn(inPipe);
		try {
			System.setOut(new PrintStream(new PipedOutputStream(outPipe), true));
			inWriter = new PrintWriter(new PipedOutputStream(inPipe), true);
		} catch (IOException e) {
			TextDemo.error(e);
			return;
		}

		Font font = new Font("Courier", Font.BOLD, 14);
		Color textColor = new Color(0xf0f0f0);
		Color backColor = new Color(0x000000);

		textOut = new JTextPane();
		textOut.setForeground(textColor);
		textOut.setBackground(backColor);
		textOut.setEditable(false);
		textOut.setFocusable(false);
		textOut.setFont(font);
		textOut.setMargin(new Insets(10, 10, 10, 10));

		JScrollPane scrollPane = new JScrollPane(textOut);

		textIn = new AutocompletingTextField();
		textIn.setForeground(textColor);
		textIn.setBackground(backColor);
		textIn.setFont(font);
		
		// Add Components to this panel.
		GridBagConstraints c;

		c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.gridy = 1;
		add(textIn, c);

		c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1.0;
		c.weighty = 1.0;
		c.gridy = 0;
		add(scrollPane, c);

		StyledDocument sDoc = (StyledDocument) textOut.getDocument();

		Style textStyle = sDoc.addStyle("text", null);
		StyleConstants.setForeground(textStyle, new Color(0xf0f0f0));
		StyleConstants.setBackground(textStyle, new Color(0x000000));

		Style echoStyle = sDoc.addStyle("echo", textStyle);
		StyleConstants.setForeground(echoStyle, new Color(0x999999));

		Style errorStyle = sDoc.addStyle("error", textStyle);
		StyleConstants.setForeground(errorStyle, new Color(0xf9efef));
		StyleConstants.setBackground(errorStyle, new Color(0xe25a5a));

		Style nameStyle = sDoc.addStyle("name", textStyle);
		StyleConstants.setForeground(nameStyle, new Color(0xcce3ff));
		
		Style quoteStyle = sDoc.addStyle("quote", textStyle);
		StyleConstants.setForeground(quoteStyle, new Color(0x98beea));

		instance = this;
		
		textIn.addActionListener(this);
	}

	// Matches strings like <name> or </name>
	private static final Pattern styleTokenPattern = Pattern.compile("<([^\\s]+?)>");

	public static void newline() {
		try {
			Document doc = instance.textOut.getDocument();
			doc.insertString(doc.getLength(), "\n", null);
		} catch (Exception e) {
		}
	}

	public static void print(String text) {
		print(text, "text");
	}

	public static void print(String text, String defaultStyle) {
		StyledDocument sDoc = (StyledDocument) instance.textOut.getDocument();

		Matcher styleMatches = styleTokenPattern.matcher(text);
		// Break text into runs and determine styling.

		try {
			int lastChar = 0;
			String lastStyle = defaultStyle;

			while (styleMatches.find()) {
				sDoc.insertString(sDoc.getLength(), text.substring(lastChar, styleMatches.start()),
						sDoc.getStyle(lastStyle));

				lastStyle = styleMatches.group(1);
				if (lastStyle.equals("/")) {
					lastStyle = defaultStyle;
				}

				lastChar = styleMatches.end();
			}

			sDoc.insertString(sDoc.getLength(), text.substring(lastChar) + "\n", sDoc.getStyle(lastStyle));
		} catch (Exception e) {
		}

		instance.textOut.setCaretPosition(sDoc.getLength());
	}

	public static void error(Exception e) {
		print(e.getMessage() + "\n<echo>" + stackString(e), "error");
	}

	public static void error(String str, Exception e) {
		print(str + "\n<echo>" + stackString(e), "error");
	}

	private static String stackString(Exception e) {
		try {
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
			return sw.toString();
		} catch (Exception e2) {
			return "Error retrieving stack trace";
		}
	}

	/**
	 * Create the GUI and show it. For thread safety, this method should be
	 * invoked from the event dispatch thread.
	 */
	public static void createAndShowGUI() {
		// Create and set up the window.
		JFrame frame = new JFrame("Hemlock High");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		// Add contents to the window.
		frame.add(new TextDemo());

		// Display the window.
		frame.pack();
		frame.setVisible(true);
		frame.setSize(900, 650);
	}

	@Override // ActionListener
	public synchronized void actionPerformed(ActionEvent evt) {
		String text = textIn.getText();
		TextDemo.print("> " + text, "echo");
		textIn.setText("");
		
		if (text.equals("clear")) {
			textOut.setText("");
		} else if (text.equals("error")) {
			try {
				throw new Exception("Testing error logger");
			} catch (Exception e) {
				error(e);
			}
		}
		else {
			inWriter.println(text);
		}
	}
}